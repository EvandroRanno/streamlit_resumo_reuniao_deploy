from pathlib import Path
import openai
from dotenv import load_dotenv, find_dotenv
import streamlit as st
from moviepy.editor import VideoFileClip
from tempfile import gettempdir
import pdfplumber
from re import sub
import os
import tempfile
import subprocess


#Carregar vari√°veis de ambiente
_ = load_dotenv(find_dotenv())

#Cria pastas temporarias
PASTA_TEMP = Path(gettempdir())
PASTA_TEMP.mkdir(exist_ok=True)
ARQUIVO_AUDIO_TEMP = PASTA_TEMP / 'audio_temp.mp3'
ARQUIVO_VIDEO_TEMP = PASTA_TEMP / 'video_temp.mp4'

#Carregar API
client = openai.OpenAI()

#Fun√ß√µes de transcricao - IN√çCIO
def transcricao(file):
    prompt = 'Voc√™ √© um assistente √∫til para transcrever √°udios. Sua tarefa √© corrigir quaisquer discrep√¢ncias ortogr√°ficas no texto transcrito.'
    transcricao = client.audio.transcriptions.create(
            model='whisper-1',
            language='pt',
            response_format='text',
            file=file,
            prompt=prompt
        )
    return transcricao

def converter_m4a_para_mp3(caminho_arquivo_m4a):
    try:
        # Clonando o FFmpeg (somente uma vez, se necess√°rio)
        if not os.path.exists('ffmpeg'):
            subprocess.run(['git', 'clone', 'https://git.ffmpeg.org/ffmpeg.git', 'ffmpeg'])

        # Compilando FFmpeg (caso ainda n√£o tenha sido feito)
        if not os.path.exists('./ffmpeg/fftools/ffmpeg'):
            subprocess.run(['make'], cwd='./ffmpeg', check=True)

        # Definindo caminho do FFmpeg compilado
        ffmpeg_bin = './ffmpeg/fftools/ffmpeg'

        # Definindo o caminho de sa√≠da do arquivo MP3
        caminho_mp3 = caminho_arquivo_m4a.replace('.m4a', '.mp3')

        # Executando a convers√£o
        subprocess.run([ffmpeg_bin, '-i', caminho_arquivo_m4a, caminho_mp3], check=True)
        return caminho_mp3
    except Exception as e:
        st.error(f"Erro na convers√£o: {e}")
        return None

def transcrever_tab_aud():
    arquivo_audio = st.file_uploader('Fa√ßa o upload de um arquivo de √°udio em formato MP3 ou M4A para transcri√ß√£o', type=['mp3', 'm4a'])

    if arquivo_audio is not None:
        # Salvar o arquivo temporariamente
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{arquivo_audio.type.split('/')[-1]}") as temp_audio_file:
            temp_audio_file.write(arquivo_audio.read())
            temp_audio_path = temp_audio_file.name

        # Verificar se o arquivo √© .m4a e realizar a convers√£o
        if temp_audio_path.endswith('.m4a'):
            st.write("Convertendo arquivo de M4A para MP3...")
            temp_mp3_path = converter_m4a_para_mp3(temp_audio_path)
            if temp_mp3_path is None:
                st.error("Falha na convers√£o de M4A para MP3.")
                return
            arquivo_convertido = temp_mp3_path
        else:
            arquivo_convertido = temp_audio_path

        # Realizar a transcri√ß√£o diretamente com o arquivo convertido
        try:
            with open(arquivo_convertido, 'rb') as audio_file:
                transcricao_text = transcricao(audio_file)  # Chama a fun√ß√£o de transcri√ß√£o
                if transcricao_text:
                    resumo_text = gerar_resumo(transcricao_text, 'transcricao')  # Chama a fun√ß√£o de resumo
                    st.write('**Transcri√ß√£o:**', transcricao_text)
                    st.write(resumo_text)
        except Exception as e:
            st.error(f"Erro ao processar a transcri√ß√£o: {e}")
        
        # Limpar os arquivos tempor√°rios
        os.remove(temp_audio_path)
        if arquivo_convertido != temp_audio_path:
            os.remove(arquivo_convertido)

def transcrever_tab_vid():
    arquivo_video = st.file_uploader('Fa√ßa o upload de um arquivo de v√≠deo em formato MP4 ou MOV para transcri√ß√£o', type=['mp4', 'mov'])

    if arquivo_video is not None:
        with open(ARQUIVO_VIDEO_TEMP, 'wb') as video_f:
            video_f.write(arquivo_video.read())

        clip = VideoFileClip(str(ARQUIVO_VIDEO_TEMP))
        clip.audio.write_audiofile(str(ARQUIVO_AUDIO_TEMP))

        with open(ARQUIVO_AUDIO_TEMP, 'rb') as audio_f:
            transcricao_text = transcricao(audio_f)
            resumo_text = gerar_resumo(transcricao_text, 'transcricao')
            st.write('**TranscricÃßaÃÉo:**', transcricao_text)
            st.write(resumo_text)

#Fun√ß√µes de transcricao - FIM

#Fun√ß√µes para extrair informa√ß√µes limpas do PDF - IN√çCIO

def info_tab_peticao_inicial():
    arquivo_pdf = st.file_uploader('Fa√ßa o upload de uma Peti√ß√£o Inicial em formato PDF para extra√ß√£o de dados', type=['pdf'])

    if arquivo_pdf is not None:
        info_pdf = extrair_info_pdf(arquivo_pdf)
        info_pdf = limpar_texto(info_pdf)
        resumo_text = gerar_resumo(info_pdf, 'pdf')
        resumo_text = escapar_caracteres_markdown(resumo_text)
        st.markdown(resumo_text)

def extrair_info_pdf(arquivo_pdf):
    texto = ''
    with pdfplumber.open(arquivo_pdf) as pdf:
        for pagina in pdf.pages:
            texto_pagina = pagina.extract_text()
            if texto_pagina:
                # Adiciona uma quebra de linha ap√≥s o texto de cada p√°gina
                texto += texto_pagina + '\n'
    return texto

def limpar_texto(texto):
    texto_limpo = ' '.join(texto.split())
    return texto_limpo

def escapar_caracteres_markdown(texto):
    caracteres_especiais = r'([$@])'
    return sub(caracteres_especiais, r'\\\1', texto)

#Fun√ß√µes para extrair informa√ß√µes limpas do PDF - FIM

#Fun√ß√µes para gera√ß√£o dos resumos - IN√çCIO
PROMPT_TRANSCRICAO = '''
Analise o conte√∫do do texto delimitado por "####" seguindo as diretrizes abaixo:

1. **Resumo completo**: Elabore um resumo detalhado, destacando os principais temas, t√≥picos e informa√ß√µes relevantes presentes no texto.
2. **Acordos e decis√µes**: Identifique e liste em forma de bullet points todas as conclus√µes, decis√µes e acordos mencionados.

Utilize o seguinte formato para a resposta:

- **Resumo do texto**: [Inserir o resumo aqui]
- **Acordos e decis√µes**:
  - [Inserir acordo ou decis√£o 1]
  - [Inserir acordo ou decis√£o 2]
  - [Inserir acordo ou decis√£o n]

Texto para an√°lise: ####{}####
'''

PROMPT_PDF = '''
 Analise o conte√∫do da peti√ß√£o inicial delimitada por "####" seguindo as diretrizes abaixo:

 1. **Resumo completo**: Elabore um resumo detalhado, destacando os principais temas, t√≥picos e informa√ß√µes relevantes presentes na peti√ß√£o inicial.
 2. **Extra√ß√£o de informa√ß√µes**: Realize a extra√ß√£o das seguintes informa√ß√µes dessa peti√ß√£o inicial: Peticionanete, comarca, valor da a√ß√£o.

 - **Resumo da Peti√ß√£o Inicial**: [Inserir o resumo aqui]
 - **Aux√≠lio para Preenchimento**:
  - [Inserir Peticionanete]
  - [Inserir Comarca]
  - [Inserir Valor da A√ß√£o]

Texto para an√°lise: ####{}####
'''

def gerar_resumo(texto, tipo):
    if tipo == 'transcricao':
        PROMPT = PROMPT_TRANSCRICAO
    elif tipo == 'pdf':
        PROMPT = PROMPT_PDF

    resposta = client.chat.completions.create(
        model='gpt-4o',
        messages=[{'role': 'user', 'content': PROMPT.format(texto)}]
    )
    return resposta.choices[0].message.content

#Fun√ß√µes para gera√ß√£o dos resumos - FIM


def main():
    st.header(body='Projeto Integrador :red[IV] - URI Erechim ‚öñÔ∏è', anchor=False, divider='orange')
    st.markdown(body='üíª **Integrantes:** Ademir, Ana M., Denis, Evandro, Jo√£o, Kauan, Lucas e Lucimar')
    tab_aud, tab_vid, tab_peticao_inicial = st.tabs(['√Åudio', 'V√≠deo', 'Peti√ß√£o Inicial'])
    with tab_aud:
        transcrever_tab_aud()
    with tab_vid:
        transcrever_tab_vid()
    with tab_peticao_inicial:
        info_tab_peticao_inicial()


if __name__ == '__main__':
    main()
